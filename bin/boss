#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'

require 'bunny'
require 'yajl'
require 'ruote'
require 'ruote/storage/fs_storage'
require 'ruote-kit'

require 'pp'

require 'boss'

require 'inifile'

STDOUT.sync = true
STDERR.sync = true

if ARGV[0].nil?
    $stderr.puts "No arguments provided. Please provide path to confiuration file."
    exit 1
end

conf = IniFile.load("/etc/skynet/skynet.conf") || IniFile.new
conf = conf.merge(IniFile.load(ARGV[0]))
debug = (conf["boss"]["debug"] == true)

$stderr.puts "Read configuration as:\n#{conf}\n" if debug

amqp_host, amqp_port = ( conf["boss"]["amqp_host"] || "127.0.0.1:5672" ).split(":")
user = conf["boss"]["amqp_user"] || "boss"
pass = conf["boss"]["amqp_pwd"]  || "boss"
vhost = conf["boss"]["amqp_vhost"] || "boss"
db_path = conf["boss"]["db_path"] || "/var/spool/boss/boss_ruote_db"
port = Integer(conf["boss"]["viewer_port"]) || 9292
bind = conf["boss"]["viewer_address"] || "127.0.0.1"

# Supervisor runs a number of processes each with an identifier
# We use that to decide what role we have
# Currently
# 0 => viewer
# 1 => scheduler
# 2 => worker
pname = ENV["SUPERVISOR_PROCESS_NAME"] || "boss_0"
$pnum = pname.split("_")[1].to_i

#Set and test connection
begin
  Boss.connection = Bunny.new(:host => amqp_host,
                              :port => amqp_port,
                              :username => user,
                              :password => pass,
                              :vhost => vhost,
                              :log_level => Logger::INFO,
                              )
  Boss.connection.start
  channel = Boss.connection.create_channel
  $stderr.puts "Connection opened ok"
rescue Bunny::PossibleAuthenticationFailureError, Bunny::TCPConnectionFailed => e
  $stderr.puts "Failed to connect to AMQP server, error was :"
  $stderr.puts e.message
  $stderr.puts "Please check that the settings in /etc/skynet/skynet.conf are correct."
  $stderr.puts "Run the following commands as root on the AMQP server :"
  $stderr.puts "/usr/sbin/rabbitmqctl add_vhost #{vhost}"
  $stderr.puts "/usr/sbin/rabbitmqctl add_user #{user} #{pass}"
  $stderr.puts "/usr/sbin/rabbitmqctl set_permissions -p #{vhost} #{user} '.*' '.*' '.*'"
  exit 1
end

storage = BOSS::Storage.new(db_path, { :number => $pnum })

roles = []
if $pnum == 0
  $stderr.puts "This is the viewer"
  $PROGRAM_NAME = "boss_viewer"
end

if $pnum == 1
  $stderr.puts "This is the scheduler"
  roles = ["scheduler"]
  $PROGRAM_NAME = "boss_scheduler"
end

if $pnum > 1
  $stderr.puts "This is a worker"
  roles = ["worker"]
  $PROGRAM_NAME = "boss_worker_#{$pnum}"
end

worker = BOSS::Worker.new(storage, { "number" => $pnum, "roles" => roles })
worker.context['worker_info_enabled'] = debug

# creating the dashboard with a storage context will start all workers
# each in its own thread
$dashboard = Ruote::Dashboard.new(storage)
$stderr.puts "Dashboard threads running" if debug
$dashboard.noisy = debug

if $pnum >1
  channel.prefetch(1)
  queue = channel.queue('ruote_workitems', :durable => 1)
  receiver = BOSS::Receiver.new($dashboard, queue, { "number" => $pnum })

  $dashboard.register_participant 'boss_register', BOSS::Registrar, :position => 'first'
end

RuoteKit.bind_engine(storage)

RuoteKit.engine.register :clear => false do
  # register forces 'override' to false, but postion 'over' overrides that
  # and if matching key ('.+' for catchall) is not in list, it goes to last
  catchall Ruote::StorageParticipant, {'position' => 'over'}
end

if $pnum == 0
  @web_server_thread = Thread.start do

    BOSS::Viewer.run!(options={
      :bind => bind,
      :port => port,
      :logging => true
    })
  end
end

shutdown = proc {

  $stderr.puts "Shutdown requested by user"

  if $pnum == 0
    BOSS::Viewer.quit!
    $stderr.puts "Viewer shutdown" if debug
  end

  if $pnum > 1

    $stderr.puts "Shut down receiver" if debug
    $receiver.shutdown
    $stderr.puts "Receiver has shutdown" if debug

    $stderr.puts "Close AMQP connection" if debug
    Boss.connection.stop
    $stderr.puts "AMQP has stopped"
  end

  worker.shutdown
  $stderr.puts "Worker has shutdown" if debug

  $dashboard.shutdown
  $stderr.puts "Dashboard has shutdown" if debug

}

memdebug = proc {
  pp GC.stat
}

Signal.trap('SIGTERM', shutdown)
Signal.trap('SIGINT', shutdown)
Signal.trap('SIGUSR1', memdebug)

$stderr.puts "Dashboard running..." if debug
$dashboard.join
$stderr.puts "Dashboard has finished" if debug

if $pnum == 0
    $stderr.puts "Waiting for web server thread..." if debug
    @web_server_thread.join
end

exit 0
