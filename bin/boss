#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'

require 'bunny'
require 'yajl'
require 'ruote'
require 'ruote-kit'

require 'pp'

require 'boss'

require 'inifile'

STDOUT.sync = true
STDERR.sync = true

# This reads the config and populates the BOSS module with a BOSS.conf
# and BOSS.storage
BOSS.read_config

# Supervisor runs a number of processes each with an identifier
# We use that to decide what role we have
# Currently
# 0 => viewer
# 1 => scheduler
# 2 => worker
pname = ENV["SUPERVISOR_PROCESS_NAME"] || "boss_0"
pnum = pname.split("_")[1].to_i

# Set and test connection
BOSS.connect_to_amqp

roles = []
if pnum == 0
  $stderr.puts "This is the viewer"
  $PROGRAM_NAME = "boss_viewer"
end

if pnum == 1
  $stderr.puts "This is the scheduler"
  roles = ["scheduler"]
  $PROGRAM_NAME = "boss_scheduler"
end

if pnum > 1
  $stderr.puts "This is a worker"
  roles = ["worker"]
  $PROGRAM_NAME = "boss_worker_#{pnum}"
end

worker = BOSS::Worker.new(BOSS.storage, { "number" => pnum, "roles" => roles })
worker.context['worker_info_enabled'] = debug

# creating the dashboard with a storage context will start all workers
# each in its own thread
dashboard = Ruote::Dashboard.new(BOSS.storage)
$stderr.puts "Dashboard threads running" if debug
dashboard.noisy = debug

if pnum >1
  BOSS.channel.prefetch(1)
  queue = BOSS.channel.queue('ruote_workitems', :durable => 1)
  receiver = BOSS::Receiver.new(dashboard, queue, { "number" => pnum })

  # Tell the Registrar class what dashboard to use
  BOSS::Registrar.set_dashboard(dashboard)
  dashboard.register_participant 'boss_register', BOSS::Registrar, :position => 'first'
end

RuoteKit.bind_engine(BOSS.storage)

RuoteKit.engine.register :clear => false do
  # register forces 'override' to false, but postion 'over' overrides that
  # and if matching key ('.+' for catchall) is not in list, it goes to last
  catchall Ruote::StorageParticipant, {'position' => 'over'}
end

if pnum == 0
  @web_server_thread = Thread.start do

    BOSS::Viewer.run!(options={
      :bind => BOSS.conf["boss"]["viewer_address"] || "127.0.0.1",
      :port => Integer(BOSS.conf["boss"]["viewer_port"]) || 9292,
      :logging => true
    })
  end
end

shutdown = proc {

  $stderr.puts "Shutdown requested by user"

  if pnum == 0
    BOSS::Viewer.quit!
    $stderr.puts "Viewer shutdown" if debug
  end

  if pnum > 1

    $stderr.puts "Shut down receiver" if debug
    receiver.shutdown
    $stderr.puts "Receiver has shutdown" if debug

    $stderr.puts "Close AMQP connection" if debug
    BOSS.connection.stop
    $stderr.puts "AMQP has stopped"
  end

  worker.shutdown
  $stderr.puts "Worker has shutdown" if debug

  $dashboard.shutdown
  $stderr.puts "Dashboard has shutdown" if debug

}

memdebug = proc {
  pp GC.stat
}

Signal.trap('SIGTERM', shutdown)
Signal.trap('SIGINT', shutdown)
Signal.trap('SIGUSR1', memdebug)

$stderr.puts "Dashboard running..." if debug
$dashboard.join
$stderr.puts "Dashboard has finished" if debug

if pnum == 0
    $stderr.puts "Waiting for web server thread..." if debug
    @web_server_thread.join
end

exit 0
