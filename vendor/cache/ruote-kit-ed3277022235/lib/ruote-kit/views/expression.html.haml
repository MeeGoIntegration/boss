
- # under the MIT license, see LICENSE.txt

- @_uses_fluo = true

%h1
  expression
  = @expression.fei.sid

#exp_fluo

%form{ :method => 'POST', :enctype => 'multipart/form-data', :accept_charset => 'UTF-8' }

  %input#_method{ :type => 'hidden', :name => '_method', :value => 'DELETE' }
  %input#state{ :type => 'hidden', :name => 'state', :value => '' }
  %input{ :type => 'hidden', :name => '_snowman', :value => '&#9731;' }

  %table.details

    %tr
      %td
        fei
      %td
        &= @expression.fei.sid
    %tr
      %td
        expid
      %td
        &= @expression.fei.expid
    %tr
      %td
        expression
      %td
        &= @expression.tree.first
    %tr
      %td
        class
      %td
        &= @expression.class.to_s
    %tr
      %td
        state
      %td
        &= @expression.state
    - if @expression.original_tree != @expression.tree
      %tr
        %td
          original tree
        %td
          - ruby = Ruote::Reader.to_ruby(@expression.original_tree)
          - rubyline = ruby.split("\n").first
          - json = Rufus::Json.pretty_encode(@expression.original_tree)
          %pre.pdef #{rubyline}
          %pre.pdef{ :style => 'display: none;' } #{ruby}
          %pre.pdef{ :style => 'display: none;' } #{json}
    %tr
      %td
        tree
      %td
        - ruby = Ruote::Reader.to_ruby(@expression.tree)
        - rubyline = ruby.split("\n").first
        - json = Rufus::Json.pretty_encode(@expression.tree)
        %pre.pdef #{rubyline}
        %pre.pdef{ :style => 'display: none;' } #{ruby}
        %pre.pdef{ :style => 'display: none;' } #{json}

    - if sched = @process.schedules.find { |s| s['owner'] == @expression.fei }
      %tr
        %td
          schedule
        %td
          &= sched['type']
          - if sched['at']
            at
            = Time.parse(sched['at']).localtime.strftime('%Y/%m/%d %H:%M:%S')
    %tr
      %td.no_border{ :colspan => 2 }
        &nbsp;

    %tr
      %td
        process
      %td
        GET
        = alink(:processes, @expression.fei.wfid)
    %tr
      %td
        other expressions
      %td
        GET
        = alink(:expressions, @expression.fei.wfid)
    %tr
      %td
        stored workitem
      %td
        - if workitem = @process.stored_workitems.find { |wi| wi.fei == @expression.fei }
          GET
          = alink(:workitems, @expression.fei.sid)

    %tr
      %td.no_border{ :colspan => 2 }
        &nbsp;

    %tr
      %td
        - if @expression.state == 'paused'
          %input{ :type => 'submit', :value => 'resume' }
        - else
          %input{ :type => 'submit', :value => 'pause' }
          %input{ :type => 'checkbox', :name => 'breakpoint' }
          breakpoint
      %td
        %span.description PUT /_ruote/expressions/#{@expression.fei.sid}

    %tr
      %td.no_border{ :colspan => 2 }
        &nbsp;

    %tr
      %td
        %input{ :type => 'submit', :value => 'cancel' }
      %td
        %span.description DELETE /_ruote/expressions/#{@expression.fei.sid}
    %tr
      %td
        %input{ :type => 'submit', :value => 'kill' }
      %td
        %span.description DELETE /_ruote/expressions/#{@expression.fei.sid}?_kill=1

    %tr
      %td.no_border{ :colspan => 2 }
        &nbsp;

    %tr#show_re_apply{ :style => 'cursor: pointer;' }
      %td{ :colspan => 2 }
        re-apply
    %tr.re_apply
      %td
        fields
      %td.no_padding
        - fields = @expression.h.applied_workitem['fields']
        - fields.delete('params')
        %textarea{ :name => 'fields', :cols => 70, :rows => 7 } #{Rufus::Json.pretty_encode(fields)}
    %tr.re_apply
      %td
        tree
        %a.ruote_button.ruote_go_button{ :title => 'open process definition editor', :href => '' }
      %td.no_padding
        - tree = @expression.tree
        - tree = Rufus::Json.pretty_encode(tree)
        - rows = tree.split("\n").size
        %textarea#tree{ :name => 'tree', :cols => 70, :rows => rows } #{tree}
    %tr.re_apply
      %td
      %td
        %input{ :type => 'submit', :value => 're-apply' }
        %span.description PUT /_ruote/expressions/#{@expression.fei.sid}


:javascript

  $(document).ready(function() {

    $('pre.pdef').on('click', Rk.toggleNext);

    Rk.fitFluo($('#exp_fluo'), $('table.details'));

    var proc_rep = #{process_tree(@process)};
    RuoteFluo.render('#exp_fluo', proc_rep, { fit: 'down' });
    RuoteFluo.highlight('#exp_fluo', '#{@expression.fei.expid}');

    Rk.onClickZoom('#exp_fluo');

    $('.re_apply').hide();

    $('#show_re_apply').on('click', function(ev) {
      $(ev.target).hide();
      $('.re_apply').show();
    });

    $('a.ruote_go_button').on('click', function(ev) {
      RkEditor.show();
      return false;
    });

    function confirmPut(message) {

      var r = confirm(message);

      if (r) {
        $('#_method')[0].value = 'PUT';
        if (message.match(/pause/)) {
          $('#state')[0].value = 'paused';
        } else if (message.match(/resume/)) {
          $('#state')[0].value = 'resuming';
        } else {
          $('#state').detach();
        }
      }

      return r;
    }

    $('input[type="submit"]').on('click', function(ev) {

      var val = ev.target.value;
      var msg = "really " + val + " expression?";

      if (val === 'cancel' || val === 'kill') {
        return confirm(msg);
      }
      return confirmPut(msg);
    });
  });

  window.tree = #{Rufus::Json.encode(@expression.tree)};

= haml :_tree_editor, :layout => false

