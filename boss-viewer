#!/usr/bin/env ruby
# This is the control file for boss-viewer.
#
# It is a configuration of ruote-kit that doesn't
# spawn a worker thread and runs inside rack
# load json backend
require 'rubygems'
require 'bundler/setup'
require 'yajl'    # fastest, but uses a c module
# require 'json_pure'  # should work everywhere

require 'ruote-kit'
require 'ruote/storage/fs_storage'
require 'inifile'

STDOUT.sync = true
STDERR.sync = true

if ARGV[0].nil?
    puts "No arguments provided. Please provide path to confiuration file."
    exit 1
end

conf = IniFile.load("/etc/skynet/skynet.conf")
conf = conf.merge(IniFile.load(ARGV[0]))

db_path = conf["boss"]["db_path"] || "/var/spool/boss/boss_ruote_db"
port = Integer(conf["boss"]["viewer_port"]) || 9292
bind = conf["boss"]["viewer_address"] || "127.0.0.1"

# establish the RuoteKit engine
RuoteKit.bind_engine(Ruote::FsStorage.new(db_path))

# The catchall is required and must occupy the bottom position.
RuoteKit.engine.register :clear => false do
  # register forces 'override' to false, but postion 'over' overrides that
  # and if matching key ('.+' for catchall) is not in list, it goes to last
  catchall Ruote::StorageParticipant, {'position' => 'over'}
end

class BossViewer < RuoteKit::Application

  # Sinatra already traps both INT and TERM
  # Override and extend the class method so we can shutdown the engine
  def BossViewer.quit!(server, handler_name)

    puts "\nstopping engine"
    RuoteKit.engine.shutdown
    RuoteKit.engine.join
    puts "engine stopped"

    super
  end
end

# Run the sinatra app
BossViewer.run!(options={
  :bind => bind,
  :port => port,
  :logging => true
})

puts "\nshut down"
exit 0

##################
# Local Variables:
# mode: Ruby;
# End:
